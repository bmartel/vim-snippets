# This snippet file enables vue files to use tabs for html, js and css. It also
# includes some vue-specific html-like snippets, as well as some general 
# boilerplate code for vue.

extends html, javascript, css 

# These snippets form a port of Sarah Drasner's vue-sublime-snippets

# some html-like snippets
	
snippet ns "named slot"
	<slot name="$1"></slot>
	
snippet vs "v-slot"
	<template v-slot:${1:default}>
	</template>
	
# The following snippets create more complex boilerplate code.

snippet co "component template"
	<template>
		$1
	</template>

	<script>
		export default {
			$2
		}
	</script>
	
	<style ${3:scoped}>
		$4
	</style>

snippet cd "component data declaration"
	data() {
		return {
			$1: $2,
		}
	},

snippet cc "component computed declaration"
	computed: {
		$1() {
			$2
		},
	},
  
snippet cco "component components declaration"
	components: {
		$1,
	},

snippet cm "component method declaration"
	methods: {
		$1() {
			$2
		},
	},

snippet cp "component props declaration"
	props: {
		$1: {
			type: ${2:String},
			default: ${3: ''},
		},
	}

snippet prop "component prop declaration"
	$1: {
		type: ${2:String},
		default: ${3: ''},
	},

snippet im
	import ${1:New} from '$1';

snippet im:e
	import ${1:New} from '$2$1';

	export default{
		components: {
			$1 
		}
	}

snippet imc
	import ${1:New} from '@/components/$1';

snippet imc:e
	import ${1:New} from '@/components/$1';

	export default{
		components: {
			$1 
		}
	}

# Add in js animation hooks
snippet ani:e 
	<transition 
	  @before-enter="beforeEnter"
	  @enter="enter"
	  @after-enter="afterEnter"
	  @enter-cancelled="enterCancelled"
	  @before-Leave="beforeLeave"
	  @leave="leave"
	  @after-leave="afterLeave"
	  @leave-cancelled="leaveCancelled"
	  :css="false">
	 	$1
	 </transition>
	 
snippet ani:m
	methods: {
	  beforeEnter(el) {
		console.log('beforeEnter');
	  }, 
	  enter(el, done) {
		 console.log('enter');
		 done();
	  },
	  afterEnter(el) {
		console.log('afterEnter');
	  }, 
	  enterCancelled(el, done) {
		 console.log('enterCancelled');
	  },
	  beforeLeave(el) {
		console.log('beforeLeave');
	  }, 
	  leave(el, done) {
		 console.log('leave');
		 done();
	  },
	  afterLeave(el) {
		console.log('afterLeave');
	  }, 
	  leaveCancelled(el, done) {
		console.log('leaveCancelled');
	  }
	}

snippet vcl 
	@click="$1"

snippet vfor
	<$1 v-for="${2:item} in $2s" :key="$2.id">
	  {{ $2 }}
	</$1>

